"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../../src/index");
var globals_1 = require("@jest/globals");
var utils_1 = require("../utils");
var g = index_1.graph.Standalone();
(0, globals_1.describe)('Relations generator', function () {
    (0, globals_1.beforeEach)(function () { return g.clear(); });
    (0, globals_1.it)('generates 1:1 required relations', function () {
        var user = g.model('User', {
            profile: g.relation(function () { return profile; })
        });
        var profile = g.model('Profile', {
            user: g.relation(user)
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        profile: Profile!\n      }\n\n      type Profile @model {\n        user: User!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates 1:1 optional relations', function () {
        var user = g.model('User', {
            profile: g.relation(function () { return profile; }).optional()
        });
        var profile = g.model('Profile', {
            user: g.relation(user)
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        profile: Profile\n      }\n\n      type Profile @model {\n        user: User!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates 1:m relations', function () {
        var user = g.model('User', {
            posts: g.relation(function () { return post; }).list()
        });
        var post = g.model('Post', {
            author: g.relation(user)
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        posts: [Post!]!\n      }\n\n      type Post @model {\n        author: User!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates 1:m relations with nullable content', function () {
        var user = g.model('User', {
            posts: g
                .relation(function () { return post; })
                .optional()
                .list()
        });
        var post = g.model('Post', {
            author: g.relation(user)
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        posts: [Post]!\n      }\n\n      type Post @model {\n        author: User!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates 1:m relations with nullable list', function () {
        var user = g.model('User', {
            posts: g
                .relation(function () { return post; })
                .list()
                .optional()
        });
        var post = g.model('Post', {
            author: g.relation(user)
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        posts: [Post!]\n      }\n\n      type Post @model {\n        author: User!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates 1:m relations with nullable list and content', function () {
        var user = g.model('User', {
            posts: g
                .relation(function () { return post; })
                .optional()
                .list()
                .optional()
        });
        var post = g.model('Post', {
            author: g.relation(user)
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        posts: [Post]\n      }\n\n      type Post @model {\n        author: User!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates m:m relations', function () {
        var user = g.model('User', {
            posts: g.relation(function () { return post; }).list()
        });
        var post = g.model('Post', {
            author: g.relation(user).list()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        posts: [Post!]!\n      }\n\n      type Post @model {\n        author: [User!]!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates self-relations', function () {
        var human = g.model('Human', {
            children: g.relation(function () { return human; }).list(),
            parent: g.relation(function () { return human; }).optional()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type Human @model {\n        children: [Human!]!\n        parent: Human\n      }\"\n    ");
    });
    (0, globals_1.it)('generates named relations', function () {
        var address = g.model('Address', {
            line1: g.string()
        });
        g.model('Order', {
            billingAddress: g.relation(address).name('billing'),
            shippingAddress: g.relation(address).name('shipping')
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type Address @model {\n        line1: String!\n      }\n\n      type Order @model {\n        billingAddress: Address! @relation(name: \"billing\")\n        shippingAddress: Address! @relation(name: \"shipping\")\n      }\"\n    ");
    });
    (0, globals_1.it)('generates named 1:m relations', function () {
        var address = g.model('Address', {
            line1: g.string()
        });
        g.model('Order', {
            billingAddresses: g.relation(address).name('billing').list(),
            shippingAddresses: g.relation(address).name('shipping').list()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type Address @model {\n        line1: String!\n      }\n\n      type Order @model {\n        billingAddresses: [Address!]! @relation(name: billing)\n        shippingAddresses: [Address!]! @relation(name: shipping)\n      }\"\n    ");
    });
});

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../../src/index");
var globals_1 = require("@jest/globals");
var utils_1 = require("../utils");
var g = index_1.graph.Standalone();
(0, globals_1.describe)('Model generator', function () {
    (0, globals_1.beforeEach)(function () { return g.clear(); });
    (0, globals_1.it)('generates required String field', function () {
        var model = g.model('User', {
            name: g.string()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates required ID field', function () {
        var model = g.model('User', {
            identifier: g.id()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        identifier: ID!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates required Int field', function () {
        var model = g.model('User', {
            age: g.int()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        age: Int!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates required Float field', function () {
        var model = g.model('User', {
            weight: g.float()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        weight: Float!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates required Boolean field', function () {
        var model = g.model('User', {
            registered: g.boolean()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        registered: Boolean!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates required Date field', function () {
        var model = g.model('User', {
            birthday: g.date()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        birthday: Date!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates required DateTime field', function () {
        var model = g.model('User', {
            registerationDate: g.datetime()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        registerationDate: DateTime!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates required Enum field', function () {
        var model = g.model('User', {
            email: g.email()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        email: Email!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates required IPAddress field', function () {
        var model = g.model('User', {
            ipAddress: g.ipAddress()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        ipAddress: IPAddress!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates required Timestamp field', function () {
        var model = g.model('User', {
            lastSeen: g.timestamp()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        lastSeen: Timestamp!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates required URL field', function () {
        var model = g.model('User', {
            fediverseInstance: g.url()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        fediverseInstance: URL!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates required JSON field', function () {
        var model = g.model('User', {
            customData: g.json()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        customData: JSON!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates required PhoneNumber field', function () {
        var model = g.model('User', {
            phoneNumber: g.phoneNumber()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        phoneNumber: PhoneNumber!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates more than one field', function () {
        var model = g.model('User', {
            name: g.string(),
            age: g.int()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String!\n        age: Int!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates an optional field', function () {
        var model = g.model('User', {
            name: g.string().optional()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a required list', function () {
        var model = g.model('User', {
            name: g.string().list()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        name: [String!]!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a searchable list', function () {
        var model = g.model('User', {
            name: g.string().list().search()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        name: [String!]! @search\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a searchable optional list', function () {
        var model = g.model('User', {
            name: g.string().list().optional().search()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        name: [String!] @search\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a searchable optional list with optional values', function () {
        var model = g.model('User', {
            name: g.string().optional().list().optional().search()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        name: [String] @search\n      }\"\n    ");
    });
    (0, globals_1.it)('generates an optional list with required values', function () {
        var model = g.model('User', {
            name: g.string().list().optional()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        name: [String!]\n      }\"\n    ");
    });
    (0, globals_1.it)('generates an optional list with optional values', function () {
        var model = g.model('User', {
            name: g.string().optional().list().optional()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        name: [String]\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a required list with optional values', function () {
        var model = g.model('User', {
            name: g.string().optional().list()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        name: [String]!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a searchable model', function () {
        var model = g
            .model('User', {
            name: g.string()
        })
            .search();
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model @search {\n        name: String!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a searchable field', function () {
        var model = g.model('User', {
            name: g.string().search()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String! @search\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a unique field', function () {
        var model = g.model('User', {
            name: g.string().unique()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String! @unique\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a unique field with scope', function () {
        var model = g.model('User', {
            name: g.string().unique(['age']),
            age: g.int()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String! @unique(fields: [\"age\"])\n        age: Int!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a length with minimum and unique + search', function () {
        var model = g.model('User', {
            name: g.string().length({ min: 2 }).unique().search()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String! @length(min: 2) @unique @search\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a length with minimum', function () {
        var model = g.model('User', {
            name: g.string().length({ min: 2 })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String! @length(min: 2)\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a length with maximum', function () {
        var model = g.model('User', {
            name: g.string().length({ max: 255 })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String! @length(max: 255)\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a length with minimum and maximum', function () {
        var model = g.model('User', {
            name: g.string().length({ min: 2, max: 255 })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String! @length(min: 2, max: 255)\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a list length with minimum', function () {
        var model = g.model('User', {
            name: g.string().list().length({ min: 2 })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        name: [String!]! @length(min: 2)\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a list length with maximum', function () {
        var model = g.model('User', {
            name: g.string().list().length({ max: 255 })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        name: [String!]! @length(max: 255)\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a list length with minimum and maximum', function () {
        var model = g.model('User', {
            name: g.string().list().length({ min: 2, max: 255 })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(model)).toMatchInlineSnapshot("\n      \"type User @model {\n        name: [String!]! @length(min: 2, max: 255)\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a referenced type', function () {
        var address = g.type('Address', {
            street: g.string().optional()
        });
        g.model('User', {
            name: g.string(),
            address: g.ref(address).optional()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type Address {\n        street: String\n      }\n\n      type User @model {\n        name: String!\n        address: Address\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a kitchen sink model', function () {
        var user = g.model('User', {
            name: g
                .string()
                .optional()
                .length({ min: 2 })
                .default('foo')
                .unique()
                .search()
                .auth(function (rules) {
                rules.private();
            })
                .cache({ maxAge: 10, staleWhileRevalidate: 5 })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(user)).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String @length(min: 2) @default(value: \"foo\") @unique @search @auth(rules: [ { allow: private } ]) @cache(maxAge: 10, staleWhileRevalidate: 5)\n      }\"\n    ");
    });
    (0, globals_1.it)('generates an optional referenced type', function () {
        var address = g.type('Address', {
            street: g.string().optional()
        });
        g.model('User', {
            name: g.string(),
            address: g.ref(address).optional()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type Address {\n        street: String\n      }\n\n      type User @model {\n        name: String!\n        address: Address\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a list referenced type', function () {
        var address = g.type('Address', {
            street: g.string().optional()
        });
        g.model('User', {
            name: g.string(),
            addresses: g.ref(address).list()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type Address {\n        street: String\n      }\n\n      type User @model {\n        name: String!\n        addresses: [Address!]!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a single public auth rule', function () {
        g.model('User', {
            name: g.string()
        }).auth(function (rules) {
            rules.public().read();
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model @auth(\n          rules: [\n            { allow: public, operations: [read] }\n          ]) {\n        name: String!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a single auth rule', function () {
        g.model('User', {
            name: g.string()
        }).auth(function (rules) {
            rules.private().read();
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model @auth(\n          rules: [\n            { allow: private, operations: [read] }\n          ]) {\n        name: String!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a multiple auth rules', function () {
        g.model('User', {
            name: g.string()
        }).auth(function (rules) {
            rules.private().read();
            rules.groups(['admin']);
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model @auth(\n          rules: [\n            { allow: private, operations: [read] }\n            { allow: groups, groups: [\"admin\"] }\n          ]) {\n        name: String!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a field with a public auth rule', function () {
        g.model('User', {
            name: g.string().auth(function (rules) {
                rules.public();
            })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String! @auth(rules: [ { allow: public } ])\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a field with a single auth rule', function () {
        g.model('User', {
            name: g.string().auth(function (rules) {
                rules.groups(['admin']);
            })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String! @auth(rules: [ { allow: groups, groups: [\"admin\"] } ])\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a unique field with a single auth rule', function () {
        g.model('User', {
            name: g
                .string()
                .unique()
                .auth(function (rules) {
                rules.groups(['admin']);
            })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String! @unique @auth(rules: [ { allow: groups, groups: [\"admin\"] } ])\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a field with a default value and a single auth rule', function () {
        g.model('User', {
            age: g
                .int()
                .default(1)
                .auth(function (rules) {
                rules.private();
            })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        age: Int! @default(value: 1) @auth(rules: [ { allow: private } ])\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a searchable field with a single auth rule', function () {
        g.model('User', {
            name: g
                .string()
                .search()
                .auth(function (rules) {
                rules.private();
            })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String! @search @auth(rules: [ { allow: private } ])\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a composite type field with a single auth rule', function () {
        var address = g.type('Address', {
            street: g.string().optional()
        });
        g.model('User', {
            address: g.ref(address).auth(function (rules) {
                rules.private();
            })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type Address {\n        street: String\n      }\n\n      type User @model {\n        address: Address! @auth(rules: [ { allow: private } ])\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a list field with a single auth rule', function () {
        g.model('User', {
            cats: g
                .string()
                .list()
                .optional()
                .auth(function (rules) { return rules.private(); })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        cats: [String!] @auth(rules: [ { allow: private } ])\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a length-limited field with a single auth rule', function () {
        g.model('User', {
            cats: g
                .string()
                .length({ min: 2 })
                .auth(function (rules) { return rules.private(); })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        cats: String! @length(min: 2) @auth(rules: [ { allow: private } ])\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a relation field with a single auth rule', function () {
        var model = g.model('User', {
            self: g.relation(function () { return model; }).auth(function (rules) { return rules.private(); })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        self: User! @auth(rules: [ { allow: private } ])\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a relation list field with a single auth rule', function () {
        var model = g.model('User', {
            self: g
                .relation(function () { return model; })
                .list()
                .auth(function (rules) { return rules.private(); })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        self: [User!]! @auth(rules: [ { allow: private } ])\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a resolver to a field', function () {
        g.model('User', {
            name: g.string().resolver('a-field')
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String! @resolver(name: \"a-field\")\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a composite type field with a resolver', function () {
        var address = g.type('Address', {
            street: g.string().optional()
        });
        g.model('User', {
            name: g.ref(address).resolver('a-field')
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type Address {\n        street: String\n      }\n\n      type User @model {\n        name: Address! @resolver(name: \"a-field\")\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a list field with a resolver', function () {
        g.model('User', {
            name: g.string().list().resolver('a-field')
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        name: [String!]! @resolver(name: \"a-field\")\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a model level cache', function () {
        g.model('User', {
            name: g.string().optional()
        }).cache({ maxAge: 60 });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model @cache(maxAge: 60) {\n        name: String\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a model level cache with staleWhileRevalidate', function () {
        g.model('User', {
            name: g.string().optional()
        }).cache({ maxAge: 60, staleWhileRevalidate: 50 });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model @cache(maxAge: 60, staleWhileRevalidate: 50) {\n        name: String\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a model level cache with type mutation invalidation', function () {
        g.model('User', {
            name: g.string().optional()
        }).cache({ maxAge: 60, mutationInvalidation: 'type' });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model @cache(maxAge: 60, mutationInvalidation: type) {\n        name: String\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a model level cache with entity mutation invalidation', function () {
        g.model('User', {
            name: g.string().optional()
        }).cache({ maxAge: 60, mutationInvalidation: 'entity' });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model @cache(maxAge: 60, mutationInvalidation: entity) {\n        name: String\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a model level cache with list mutation invalidation', function () {
        g.model('User', {
            name: g.string().optional()
        }).cache({ maxAge: 60, mutationInvalidation: 'list' });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model @cache(maxAge: 60, mutationInvalidation: list) {\n        name: String\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a model level cache with custom field mutation invalidation', function () {
        g.model('User', {
            name: g.string().optional()
        }).cache({ maxAge: 60, mutationInvalidation: { field: 'name' } });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model @cache(maxAge: 60, mutationInvalidation: { field: \"name\" }) {\n        name: String\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a field level cache', function () {
        g.model('User', {
            name: g
                .string()
                .optional()
                .cache({ maxAge: 60, staleWhileRevalidate: 50 })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String @cache(maxAge: 60, staleWhileRevalidate: 50)\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a cache with unique', function () {
        g.model('User', {
            name: g.string().optional().unique().cache({ maxAge: 60 })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String @unique @cache(maxAge: 60)\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a cache with default', function () {
        g.model('User', {
            name: g
                .string()
                .optional()
                .default('Bob')
                .cache({ maxAge: 60, staleWhileRevalidate: 50 })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String @default(value: \"Bob\") @cache(maxAge: 60, staleWhileRevalidate: 50)\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a cache with length-limited string', function () {
        g.model('User', {
            name: g
                .string()
                .optional()
                .length({ min: 1 })
                .cache({ maxAge: 60, staleWhileRevalidate: 50 })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String @length(min: 1) @cache(maxAge: 60, staleWhileRevalidate: 50)\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a cache with resolver', function () {
        g.model('User', {
            name: g
                .string()
                .optional()
                .resolver('a-field')
                .cache({ maxAge: 60, staleWhileRevalidate: 50 })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String @resolver(name: \"a-field\") @cache(maxAge: 60, staleWhileRevalidate: 50)\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a cache with search', function () {
        g.model('User', {
            name: g
                .string()
                .optional()
                .search()
                .cache({ maxAge: 60, staleWhileRevalidate: 50 })
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: g }))).toMatchInlineSnapshot("\n      \"type User @model {\n        name: String @search @cache(maxAge: 60, staleWhileRevalidate: 50)\n      }\"\n    ");
    });
    (0, globals_1.it)('prevents using of whitespaced identifier as the name', function () {
        (0, globals_1.expect)(function () { return g.model('white space', { name: g.string() }); }).toThrow('Given name "white space" is not a valid TypeScript identifier.');
    });
    (0, globals_1.it)('prevents using of number-prefixed identifier as the name', function () {
        (0, globals_1.expect)(function () { return g.model('0User', { name: g.string() }); }).toThrow('Given name "0User" is not a valid TypeScript identifier.');
    });
    (0, globals_1.it)('prevents using of weird characters identifier as the name', function () {
        (0, globals_1.expect)(function () { return g.model('!@#$%^&*()+|~`=-', { name: g.string() }); }).toThrow('Given name "!@#$%^&*()+|~`=-" is not a valid TypeScript identifier.');
    });
    (0, globals_1.it)('prevents using of whitespaced identifier as a field name', function () {
        (0, globals_1.expect)(function () { return g.model('A', { 'white space': g.string() }); }).toThrow('Given name "white space" is not a valid TypeScript identifier.');
    });
    (0, globals_1.it)('prevents using of number-prefixed identifier as a field name', function () {
        (0, globals_1.expect)(function () { return g.model('A', { '0name': g.string() }); }).toThrow('Given name "0name" is not a valid TypeScript identifier.');
    });
    (0, globals_1.it)('prevents using of weird characters identifier as a field name', function () {
        (0, globals_1.expect)(function () { return g.model('A', { '!@#$%^&*()+|~`=-': g.string() }); }).toThrow('Given name "!@#$%^&*()+|~`=-" is not a valid TypeScript identifier.');
    });
});

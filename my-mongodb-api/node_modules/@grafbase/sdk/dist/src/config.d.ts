import { AuthParams } from './auth';
import { CacheParams } from './cache';
import { FederatedGraph, Graph } from './grafbase-schema';
import { ExperimentalParams } from './experimental';
/**
 * An interface to create the complete config definition.
 */
export interface GraphConfigInput {
    graph: Graph;
    auth?: AuthParams;
    cache?: CacheParams;
    experimental?: ExperimentalParams;
}
/**
 * @deprecated use `graph` instead of `schema`
 * An interface to create the complete config definition.
 */
export interface DeprecatedGraphConfigInput {
    /** @deprecated use `graph` instead */
    schema: Graph;
    auth?: AuthParams;
    cache?: CacheParams;
    experimental?: ExperimentalParams;
}
/**
 * An interface to create the federation config definition.
 */
export interface FederatedGraphConfigInput {
    graph: FederatedGraph;
}
/**
 * Defines the complete Grafbase configuration.
 */
export declare class GraphConfig {
    private graph;
    private readonly auth?;
    private readonly cache?;
    private readonly experimental?;
    /** @deprecated use `graph` instead of `schema` */
    constructor(input: GraphConfigInput | DeprecatedGraphConfigInput);
    toString(): string;
}
export declare class FederatedGraphConfig {
    private graph;
    constructor(input: FederatedGraphConfigInput);
    toString(): string;
}
//# sourceMappingURL=config.d.ts.map